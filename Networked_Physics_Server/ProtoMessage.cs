// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ProtoMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.ProtobufMessage {

  /// <summary>Holder for reflection information generated from ProtoMessage.proto</summary>
  public static partial class ProtoMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for ProtoMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtoMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQcm90b01lc3NhZ2UucHJvdG8SD1Byb3RvYnVmTWVzc2FnZSLrBAoKVURQ",
            "TWVzc2FnZRI3Cgtsb2Nrc3RlcG1zZxgBIAEoCzIgLlByb3RvYnVmTWVzc2Fn",
            "ZS5Mb2NrU3RlcE1lc3NhZ2VIABI3CgtzbmFwc2hvdG1zZxgCIAEoCzIgLlBy",
            "b3RvYnVmTWVzc2FnZS5TbmFwU2hvdE1lc3NhZ2VIABIxCghzdGF0ZW1zZxgD",
            "IAEoCzIdLlByb3RvYnVmTWVzc2FnZS5TdGF0ZU1lc3NhZ2VIABI5Cgx1ZHBz",
            "dHJpbmdtc2cYBCABKAsyIS5Qcm90b2J1Zk1lc3NhZ2UuVURQU3RyaW5nTWVz",
            "c2FnZUgAEkEKEHNuYXBzaG90aW5wdXRtc2cYBSABKAsyJS5Qcm90b2J1Zk1l",
            "c3NhZ2UuU25hcFNob3RJbnB1dE1lc3NhZ2VIABIzCghzdGF0ZWFjaxgGIAEo",
            "CzIfLlByb3RvYnVmTWVzc2FnZS5TdGF0ZUFDS1BhY2tldEgAElcKG3ByZWRp",
            "Y3Rpb25yZWNvbmNpbGlhdGlvbm1zZxgHIAEoCzIwLlByb3RvYnVmTWVzc2Fn",
            "ZS5QcmVkaWN0aW9uUmVjb25jaWxpYXRpb25NZXNzYWdlSAASYQogcHJlZGlj",
            "dGlvbnJlY29uY2lsaWF0aW9uaW5wdXRtc2cYCCABKAsyNS5Qcm90b2J1Zk1l",
            "c3NhZ2UuUHJlZGljdGlvblJlY29uY2lsaWF0aW9uSW5wdXRNZXNzYWdlSAAS",
            "QgoUc2VydmVydGltZXJlcXVlc3Rtc2cYCSABKAsyIi5Qcm90b2J1Zk1lc3Nh",
            "Z2UuU2VydmVyVGltZVJlcXVlc3RIAEIFCgNtc2cimAEKD0xvY2tTdGVwTWVz",
            "c2FnZRI2CgZpbnB1dHMYASADKAsyJi5Qcm90b2J1Zk1lc3NhZ2UuTG9ja1N0",
            "ZXBNZXNzYWdlLklucHV0Gk0KBUlucHV0EgwKBGxlZnQYASABKAgSDQoFcmln",
            "aHQYAiABKAgSCgoCdXAYAyABKAgSDAoEZG93bhgEIAEoCBINCgVzcGFjZRgF",
            "IAEoCCKOAgoPU25hcFNob3RNZXNzYWdlEg0KBW5ldElEGAEgASgFEhAKCHNl",
            "cXVlbmNlGAIgASgFEhgKEGRlbHRhcGFja2V0aW5kZXgYAyABKAUSDwoHaW5p",
            "dGlhbBgEIAEoCBIQCghpbnB1dGFjaxgFIAEoBRJECg5vYmplY3RzbmFwc2hv",
            "dBgGIAMoCzIsLlByb3RvYnVmTWVzc2FnZS5TbmFwU2hvdE1lc3NhZ2UuT2Jq",
            "ZWN0c3RhdGUaVwoLT2JqZWN0c3RhdGUSEwoLaW50ZXJhY3RpbmcYASABKAgS",
            "EQoJcG9zaXRpb25YGAIgASgCEhEKCXBvc2l0aW9uWRgDIAEoAhINCgVhbmds",
            "ZRgEIAEoAiJuChRTbmFwU2hvdElucHV0TWVzc2FnZRIQCghzZXF1ZW5jZRgB",
            "IAEoBRIMCgRsZWZ0GAIgASgIEg0KBXJpZ2h0GAMgASgIEgoKAnVwGAQgASgI",
            "EgwKBGRvd24YBSABKAgSDQoFc3BhY2UYBiABKAgiWAoSVURQTWVzc2FnZVNu",
            "YXBzaG90Eg0KBW5ldGlkGAEgASgFEhEKCXBvc2l0aW9uWBgCIAEoAhIRCglw",
            "b3NpdGlvblkYAyABKAISDQoFYW5nbGUYBCABKAIi7gMKDFN0YXRlTWVzc2Fn",
            "ZRINCgVuZXRJRBgBIAEoBRIQCghzZXF1ZW5jZRgCIAEoBRIXCg9iYXNlQUNL",
            "U2VxdWVuY2UYAyABKAUSMwoGaW5wdXRzGAQgAygLMiMuUHJvdG9idWZNZXNz",
            "YWdlLlN0YXRlTWVzc2FnZS5JbnB1dBI+CgtvYmplY3RzdGF0ZRgFIAMoCzIp",
            "LlByb3RvYnVmTWVzc2FnZS5TdGF0ZU1lc3NhZ2UuT2JqZWN0c3RhdGUSEQoJ",
            "dGltZXN0YW1wGAYgASgCGk0KBUlucHV0EgwKBGxlZnQYASABKAgSDQoFcmln",
            "aHQYAiABKAgSCgoCdXAYAyABKAgSDAoEZG93bhgEIAEoCBINCgVzcGFjZRgF",
            "IAEoCBrMAQoLT2JqZWN0c3RhdGUSDQoFaW5kZXgYASABKAUSFQoNYWJzb2x1",
            "dGVWYWx1ZRgCIAEoCBIUCgxiYXNlU2VxdWVuY2UYAyABKAUSEQoJcG9zaXRp",
            "b25YGAQgASgCEhEKCXBvc2l0aW9uWRgFIAEoAhINCgVhbmdsZRgGIAEoAhIY",
            "ChBsaW5lYXJfdmVsb2NpdHlYGAcgASgCEhgKEGxpbmVhcl92ZWxvY2l0eVkY",
            "CCABKAISGAoQYW5ndWxhcl92ZWxvY2l0eRgJIAEoAiIfChBVRFBTdHJpbmdN",
            "ZXNzYWdlEgsKA21zZxgBIAEoCSJFCg5TdGF0ZUFDS1BhY2tldBINCgVuZXRJ",
            "RBgBIAEoBRITCgthY2tTZXF1ZW5jZRgCIAEoBRIPCgdhY2tCaXRzGAMgASgF",
            "IhkKClRDUE1lc3NhZ2USCwoDbXNnGAEgASgJItIDCh9QcmVkaWN0aW9uUmVj",
            "b25jaWxpYXRpb25NZXNzYWdlEg0KBW5ldElEGAEgASgFEhAKCHNlcXVlbmNl",
            "GAIgASgFEkYKBmlucHV0cxgEIAMoCzI2LlByb3RvYnVmTWVzc2FnZS5QcmVk",
            "aWN0aW9uUmVjb25jaWxpYXRpb25NZXNzYWdlLklucHV0ElEKC29iamVjdHN0",
            "YXRlGAUgAygLMjwuUHJvdG9idWZNZXNzYWdlLlByZWRpY3Rpb25SZWNvbmNp",
            "bGlhdGlvbk1lc3NhZ2UuT2JqZWN0c3RhdGUSEQoJdGltZXN0YW1wGAYgASgC",
            "Gk0KBUlucHV0EgwKBGxlZnQYASABKAgSDQoFcmlnaHQYAiABKAgSCgoCdXAY",
            "AyABKAgSDAoEZG93bhgEIAEoCBINCgVzcGFjZRgFIAEoCBqQAQoLT2JqZWN0",
            "c3RhdGUSEQoJcG9zaXRpb25YGAEgASgCEhEKCXBvc2l0aW9uWRgCIAEoAhIN",
            "CgVhbmdsZRgDIAEoAhIYChBsaW5lYXJfdmVsb2NpdHlYGAQgASgCEhgKEGxp",
            "bmVhcl92ZWxvY2l0eVkYBSABKAISGAoQYW5ndWxhcl92ZWxvY2l0eRgGIAEo",
            "AiLjAQokUHJlZGljdGlvblJlY29uY2lsaWF0aW9uSW5wdXRNZXNzYWdlEhAK",
            "CHNlcXVlbmNlGAEgASgFEg0KBW5ldGlkGAIgASgFEksKBmlucHV0cxgDIAMo",
            "CzI7LlByb3RvYnVmTWVzc2FnZS5QcmVkaWN0aW9uUmVjb25jaWxpYXRpb25J",
            "bnB1dE1lc3NhZ2UuSW5wdXQaTQoFSW5wdXQSDAoEbGVmdBgBIAEoCBINCgVy",
            "aWdodBgCIAEoCBIKCgJ1cBgDIAEoCBIMCgRkb3duGAQgASgIEg0KBXNwYWNl",
            "GAUgASgIIk0KEVNlcnZlclRpbWVSZXF1ZXN0EhAKCGNsaWVudElEGAEgASgF",
            "EhIKCmNsaWVudHRpbWUYAiABKAUSEgoKc2VydmVydGltZRgDIAEoBUIiqgIf",
            "R29vZ2xlLlByb3RvYnVmLlByb3RvYnVmTWVzc2FnZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.UDPMessage), global::Google.Protobuf.ProtobufMessage.UDPMessage.Parser, new[]{ "Lockstepmsg", "Snapshotmsg", "Statemsg", "Udpstringmsg", "Snapshotinputmsg", "Stateack", "Predictionreconciliationmsg", "Predictionreconciliationinputmsg", "Servertimerequestmsg" }, new[]{ "Msg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.LockStepMessage), global::Google.Protobuf.ProtobufMessage.LockStepMessage.Parser, new[]{ "Inputs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.LockStepMessage.Types.Input), global::Google.Protobuf.ProtobufMessage.LockStepMessage.Types.Input.Parser, new[]{ "Left", "Right", "Up", "Down", "Space" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.SnapShotMessage), global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Parser, new[]{ "NetID", "Sequence", "Deltapacketindex", "Initial", "Inputack", "Objectsnapshot" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Types.Objectstate), global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Types.Objectstate.Parser, new[]{ "Interacting", "PositionX", "PositionY", "Angle" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.SnapShotInputMessage), global::Google.Protobuf.ProtobufMessage.SnapShotInputMessage.Parser, new[]{ "Sequence", "Left", "Right", "Up", "Down", "Space" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.UDPMessageSnapshot), global::Google.Protobuf.ProtobufMessage.UDPMessageSnapshot.Parser, new[]{ "Netid", "PositionX", "PositionY", "Angle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.StateMessage), global::Google.Protobuf.ProtobufMessage.StateMessage.Parser, new[]{ "NetID", "Sequence", "BaseACKSequence", "Inputs", "Objectstate", "Timestamp" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Input), global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Input.Parser, new[]{ "Left", "Right", "Up", "Down", "Space" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Objectstate), global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Objectstate.Parser, new[]{ "Index", "AbsoluteValue", "BaseSequence", "PositionX", "PositionY", "Angle", "LinearVelocityX", "LinearVelocityY", "AngularVelocity" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.UDPStringMessage), global::Google.Protobuf.ProtobufMessage.UDPStringMessage.Parser, new[]{ "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.StateACKPacket), global::Google.Protobuf.ProtobufMessage.StateACKPacket.Parser, new[]{ "NetID", "AckSequence", "AckBits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.TCPMessage), global::Google.Protobuf.ProtobufMessage.TCPMessage.Parser, new[]{ "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage), global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Parser, new[]{ "NetID", "Sequence", "Inputs", "Objectstate", "Timestamp" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Input), global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Input.Parser, new[]{ "Left", "Right", "Up", "Down", "Space" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Objectstate), global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Objectstate.Parser, new[]{ "PositionX", "PositionY", "Angle", "LinearVelocityX", "LinearVelocityY", "AngularVelocity" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage), global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Parser, new[]{ "Sequence", "Netid", "Inputs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Types.Input), global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Types.Input.Parser, new[]{ "Left", "Right", "Up", "Down", "Space" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.ProtobufMessage.ServerTimeRequest), global::Google.Protobuf.ProtobufMessage.ServerTimeRequest.Parser, new[]{ "ClientID", "Clienttime", "Servertime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UDPMessage : pb::IMessage<UDPMessage> {
    private static readonly pb::MessageParser<UDPMessage> _parser = new pb::MessageParser<UDPMessage>(() => new UDPMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UDPMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPMessage(UDPMessage other) : this() {
      switch (other.MsgCase) {
        case MsgOneofCase.Lockstepmsg:
          Lockstepmsg = other.Lockstepmsg.Clone();
          break;
        case MsgOneofCase.Snapshotmsg:
          Snapshotmsg = other.Snapshotmsg.Clone();
          break;
        case MsgOneofCase.Statemsg:
          Statemsg = other.Statemsg.Clone();
          break;
        case MsgOneofCase.Udpstringmsg:
          Udpstringmsg = other.Udpstringmsg.Clone();
          break;
        case MsgOneofCase.Snapshotinputmsg:
          Snapshotinputmsg = other.Snapshotinputmsg.Clone();
          break;
        case MsgOneofCase.Stateack:
          Stateack = other.Stateack.Clone();
          break;
        case MsgOneofCase.Predictionreconciliationmsg:
          Predictionreconciliationmsg = other.Predictionreconciliationmsg.Clone();
          break;
        case MsgOneofCase.Predictionreconciliationinputmsg:
          Predictionreconciliationinputmsg = other.Predictionreconciliationinputmsg.Clone();
          break;
        case MsgOneofCase.Servertimerequestmsg:
          Servertimerequestmsg = other.Servertimerequestmsg.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPMessage Clone() {
      return new UDPMessage(this);
    }

    /// <summary>Field number for the "lockstepmsg" field.</summary>
    public const int LockstepmsgFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.LockStepMessage Lockstepmsg {
      get { return msgCase_ == MsgOneofCase.Lockstepmsg ? (global::Google.Protobuf.ProtobufMessage.LockStepMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Lockstepmsg;
      }
    }

    /// <summary>Field number for the "snapshotmsg" field.</summary>
    public const int SnapshotmsgFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.SnapShotMessage Snapshotmsg {
      get { return msgCase_ == MsgOneofCase.Snapshotmsg ? (global::Google.Protobuf.ProtobufMessage.SnapShotMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Snapshotmsg;
      }
    }

    /// <summary>Field number for the "statemsg" field.</summary>
    public const int StatemsgFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.StateMessage Statemsg {
      get { return msgCase_ == MsgOneofCase.Statemsg ? (global::Google.Protobuf.ProtobufMessage.StateMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Statemsg;
      }
    }

    /// <summary>Field number for the "udpstringmsg" field.</summary>
    public const int UdpstringmsgFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.UDPStringMessage Udpstringmsg {
      get { return msgCase_ == MsgOneofCase.Udpstringmsg ? (global::Google.Protobuf.ProtobufMessage.UDPStringMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Udpstringmsg;
      }
    }

    /// <summary>Field number for the "snapshotinputmsg" field.</summary>
    public const int SnapshotinputmsgFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.SnapShotInputMessage Snapshotinputmsg {
      get { return msgCase_ == MsgOneofCase.Snapshotinputmsg ? (global::Google.Protobuf.ProtobufMessage.SnapShotInputMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Snapshotinputmsg;
      }
    }

    /// <summary>Field number for the "stateack" field.</summary>
    public const int StateackFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.StateACKPacket Stateack {
      get { return msgCase_ == MsgOneofCase.Stateack ? (global::Google.Protobuf.ProtobufMessage.StateACKPacket) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Stateack;
      }
    }

    /// <summary>Field number for the "predictionreconciliationmsg" field.</summary>
    public const int PredictionreconciliationmsgFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage Predictionreconciliationmsg {
      get { return msgCase_ == MsgOneofCase.Predictionreconciliationmsg ? (global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Predictionreconciliationmsg;
      }
    }

    /// <summary>Field number for the "predictionreconciliationinputmsg" field.</summary>
    public const int PredictionreconciliationinputmsgFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage Predictionreconciliationinputmsg {
      get { return msgCase_ == MsgOneofCase.Predictionreconciliationinputmsg ? (global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Predictionreconciliationinputmsg;
      }
    }

    /// <summary>Field number for the "servertimerequestmsg" field.</summary>
    public const int ServertimerequestmsgFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.ProtobufMessage.ServerTimeRequest Servertimerequestmsg {
      get { return msgCase_ == MsgOneofCase.Servertimerequestmsg ? (global::Google.Protobuf.ProtobufMessage.ServerTimeRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.Servertimerequestmsg;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      Lockstepmsg = 1,
      Snapshotmsg = 2,
      Statemsg = 3,
      Udpstringmsg = 4,
      Snapshotinputmsg = 5,
      Stateack = 6,
      Predictionreconciliationmsg = 7,
      Predictionreconciliationinputmsg = 8,
      Servertimerequestmsg = 9,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UDPMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UDPMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Lockstepmsg, other.Lockstepmsg)) return false;
      if (!object.Equals(Snapshotmsg, other.Snapshotmsg)) return false;
      if (!object.Equals(Statemsg, other.Statemsg)) return false;
      if (!object.Equals(Udpstringmsg, other.Udpstringmsg)) return false;
      if (!object.Equals(Snapshotinputmsg, other.Snapshotinputmsg)) return false;
      if (!object.Equals(Stateack, other.Stateack)) return false;
      if (!object.Equals(Predictionreconciliationmsg, other.Predictionreconciliationmsg)) return false;
      if (!object.Equals(Predictionreconciliationinputmsg, other.Predictionreconciliationinputmsg)) return false;
      if (!object.Equals(Servertimerequestmsg, other.Servertimerequestmsg)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (msgCase_ == MsgOneofCase.Lockstepmsg) hash ^= Lockstepmsg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Snapshotmsg) hash ^= Snapshotmsg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Statemsg) hash ^= Statemsg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Udpstringmsg) hash ^= Udpstringmsg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Snapshotinputmsg) hash ^= Snapshotinputmsg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Stateack) hash ^= Stateack.GetHashCode();
      if (msgCase_ == MsgOneofCase.Predictionreconciliationmsg) hash ^= Predictionreconciliationmsg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Predictionreconciliationinputmsg) hash ^= Predictionreconciliationinputmsg.GetHashCode();
      if (msgCase_ == MsgOneofCase.Servertimerequestmsg) hash ^= Servertimerequestmsg.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msgCase_ == MsgOneofCase.Lockstepmsg) {
        output.WriteRawTag(10);
        output.WriteMessage(Lockstepmsg);
      }
      if (msgCase_ == MsgOneofCase.Snapshotmsg) {
        output.WriteRawTag(18);
        output.WriteMessage(Snapshotmsg);
      }
      if (msgCase_ == MsgOneofCase.Statemsg) {
        output.WriteRawTag(26);
        output.WriteMessage(Statemsg);
      }
      if (msgCase_ == MsgOneofCase.Udpstringmsg) {
        output.WriteRawTag(34);
        output.WriteMessage(Udpstringmsg);
      }
      if (msgCase_ == MsgOneofCase.Snapshotinputmsg) {
        output.WriteRawTag(42);
        output.WriteMessage(Snapshotinputmsg);
      }
      if (msgCase_ == MsgOneofCase.Stateack) {
        output.WriteRawTag(50);
        output.WriteMessage(Stateack);
      }
      if (msgCase_ == MsgOneofCase.Predictionreconciliationmsg) {
        output.WriteRawTag(58);
        output.WriteMessage(Predictionreconciliationmsg);
      }
      if (msgCase_ == MsgOneofCase.Predictionreconciliationinputmsg) {
        output.WriteRawTag(66);
        output.WriteMessage(Predictionreconciliationinputmsg);
      }
      if (msgCase_ == MsgOneofCase.Servertimerequestmsg) {
        output.WriteRawTag(74);
        output.WriteMessage(Servertimerequestmsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msgCase_ == MsgOneofCase.Lockstepmsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lockstepmsg);
      }
      if (msgCase_ == MsgOneofCase.Snapshotmsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshotmsg);
      }
      if (msgCase_ == MsgOneofCase.Statemsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statemsg);
      }
      if (msgCase_ == MsgOneofCase.Udpstringmsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Udpstringmsg);
      }
      if (msgCase_ == MsgOneofCase.Snapshotinputmsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Snapshotinputmsg);
      }
      if (msgCase_ == MsgOneofCase.Stateack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stateack);
      }
      if (msgCase_ == MsgOneofCase.Predictionreconciliationmsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Predictionreconciliationmsg);
      }
      if (msgCase_ == MsgOneofCase.Predictionreconciliationinputmsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Predictionreconciliationinputmsg);
      }
      if (msgCase_ == MsgOneofCase.Servertimerequestmsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Servertimerequestmsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UDPMessage other) {
      if (other == null) {
        return;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.Lockstepmsg:
          if (Lockstepmsg == null) {
            Lockstepmsg = new global::Google.Protobuf.ProtobufMessage.LockStepMessage();
          }
          Lockstepmsg.MergeFrom(other.Lockstepmsg);
          break;
        case MsgOneofCase.Snapshotmsg:
          if (Snapshotmsg == null) {
            Snapshotmsg = new global::Google.Protobuf.ProtobufMessage.SnapShotMessage();
          }
          Snapshotmsg.MergeFrom(other.Snapshotmsg);
          break;
        case MsgOneofCase.Statemsg:
          if (Statemsg == null) {
            Statemsg = new global::Google.Protobuf.ProtobufMessage.StateMessage();
          }
          Statemsg.MergeFrom(other.Statemsg);
          break;
        case MsgOneofCase.Udpstringmsg:
          if (Udpstringmsg == null) {
            Udpstringmsg = new global::Google.Protobuf.ProtobufMessage.UDPStringMessage();
          }
          Udpstringmsg.MergeFrom(other.Udpstringmsg);
          break;
        case MsgOneofCase.Snapshotinputmsg:
          if (Snapshotinputmsg == null) {
            Snapshotinputmsg = new global::Google.Protobuf.ProtobufMessage.SnapShotInputMessage();
          }
          Snapshotinputmsg.MergeFrom(other.Snapshotinputmsg);
          break;
        case MsgOneofCase.Stateack:
          if (Stateack == null) {
            Stateack = new global::Google.Protobuf.ProtobufMessage.StateACKPacket();
          }
          Stateack.MergeFrom(other.Stateack);
          break;
        case MsgOneofCase.Predictionreconciliationmsg:
          if (Predictionreconciliationmsg == null) {
            Predictionreconciliationmsg = new global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage();
          }
          Predictionreconciliationmsg.MergeFrom(other.Predictionreconciliationmsg);
          break;
        case MsgOneofCase.Predictionreconciliationinputmsg:
          if (Predictionreconciliationinputmsg == null) {
            Predictionreconciliationinputmsg = new global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage();
          }
          Predictionreconciliationinputmsg.MergeFrom(other.Predictionreconciliationinputmsg);
          break;
        case MsgOneofCase.Servertimerequestmsg:
          if (Servertimerequestmsg == null) {
            Servertimerequestmsg = new global::Google.Protobuf.ProtobufMessage.ServerTimeRequest();
          }
          Servertimerequestmsg.MergeFrom(other.Servertimerequestmsg);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Protobuf.ProtobufMessage.LockStepMessage subBuilder = new global::Google.Protobuf.ProtobufMessage.LockStepMessage();
            if (msgCase_ == MsgOneofCase.Lockstepmsg) {
              subBuilder.MergeFrom(Lockstepmsg);
            }
            input.ReadMessage(subBuilder);
            Lockstepmsg = subBuilder;
            break;
          }
          case 18: {
            global::Google.Protobuf.ProtobufMessage.SnapShotMessage subBuilder = new global::Google.Protobuf.ProtobufMessage.SnapShotMessage();
            if (msgCase_ == MsgOneofCase.Snapshotmsg) {
              subBuilder.MergeFrom(Snapshotmsg);
            }
            input.ReadMessage(subBuilder);
            Snapshotmsg = subBuilder;
            break;
          }
          case 26: {
            global::Google.Protobuf.ProtobufMessage.StateMessage subBuilder = new global::Google.Protobuf.ProtobufMessage.StateMessage();
            if (msgCase_ == MsgOneofCase.Statemsg) {
              subBuilder.MergeFrom(Statemsg);
            }
            input.ReadMessage(subBuilder);
            Statemsg = subBuilder;
            break;
          }
          case 34: {
            global::Google.Protobuf.ProtobufMessage.UDPStringMessage subBuilder = new global::Google.Protobuf.ProtobufMessage.UDPStringMessage();
            if (msgCase_ == MsgOneofCase.Udpstringmsg) {
              subBuilder.MergeFrom(Udpstringmsg);
            }
            input.ReadMessage(subBuilder);
            Udpstringmsg = subBuilder;
            break;
          }
          case 42: {
            global::Google.Protobuf.ProtobufMessage.SnapShotInputMessage subBuilder = new global::Google.Protobuf.ProtobufMessage.SnapShotInputMessage();
            if (msgCase_ == MsgOneofCase.Snapshotinputmsg) {
              subBuilder.MergeFrom(Snapshotinputmsg);
            }
            input.ReadMessage(subBuilder);
            Snapshotinputmsg = subBuilder;
            break;
          }
          case 50: {
            global::Google.Protobuf.ProtobufMessage.StateACKPacket subBuilder = new global::Google.Protobuf.ProtobufMessage.StateACKPacket();
            if (msgCase_ == MsgOneofCase.Stateack) {
              subBuilder.MergeFrom(Stateack);
            }
            input.ReadMessage(subBuilder);
            Stateack = subBuilder;
            break;
          }
          case 58: {
            global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage subBuilder = new global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage();
            if (msgCase_ == MsgOneofCase.Predictionreconciliationmsg) {
              subBuilder.MergeFrom(Predictionreconciliationmsg);
            }
            input.ReadMessage(subBuilder);
            Predictionreconciliationmsg = subBuilder;
            break;
          }
          case 66: {
            global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage subBuilder = new global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage();
            if (msgCase_ == MsgOneofCase.Predictionreconciliationinputmsg) {
              subBuilder.MergeFrom(Predictionreconciliationinputmsg);
            }
            input.ReadMessage(subBuilder);
            Predictionreconciliationinputmsg = subBuilder;
            break;
          }
          case 74: {
            global::Google.Protobuf.ProtobufMessage.ServerTimeRequest subBuilder = new global::Google.Protobuf.ProtobufMessage.ServerTimeRequest();
            if (msgCase_ == MsgOneofCase.Servertimerequestmsg) {
              subBuilder.MergeFrom(Servertimerequestmsg);
            }
            input.ReadMessage(subBuilder);
            Servertimerequestmsg = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockStepMessage : pb::IMessage<LockStepMessage> {
    private static readonly pb::MessageParser<LockStepMessage> _parser = new pb::MessageParser<LockStepMessage>(() => new LockStepMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockStepMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockStepMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockStepMessage(LockStepMessage other) : this() {
      inputs_ = other.inputs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockStepMessage Clone() {
      return new LockStepMessage(this);
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.ProtobufMessage.LockStepMessage.Types.Input> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.ProtobufMessage.LockStepMessage.Types.Input.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.LockStepMessage.Types.Input> inputs_ = new pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.LockStepMessage.Types.Input>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.LockStepMessage.Types.Input> Inputs {
      get { return inputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockStepMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockStepMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputs_.Equals(other.inputs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockStepMessage other) {
      if (other == null) {
        return;
      }
      inputs_.Add(other.inputs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LockStepMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Input : pb::IMessage<Input> {
        private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Input> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.ProtobufMessage.LockStepMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input(Input other) : this() {
          left_ = other.left_;
          right_ = other.right_;
          up_ = other.up_;
          down_ = other.down_;
          space_ = other.space_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input Clone() {
          return new Input(this);
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 1;
        private bool left_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        /// <summary>Field number for the "right" field.</summary>
        public const int RightFieldNumber = 2;
        private bool right_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Right {
          get { return right_; }
          set {
            right_ = value;
          }
        }

        /// <summary>Field number for the "up" field.</summary>
        public const int UpFieldNumber = 3;
        private bool up_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Up {
          get { return up_; }
          set {
            up_ = value;
          }
        }

        /// <summary>Field number for the "down" field.</summary>
        public const int DownFieldNumber = 4;
        private bool down_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Down {
          get { return down_; }
          set {
            down_ = value;
          }
        }

        /// <summary>Field number for the "space" field.</summary>
        public const int SpaceFieldNumber = 5;
        private bool space_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Space {
          get { return space_; }
          set {
            space_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Input);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Input other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Left != other.Left) return false;
          if (Right != other.Right) return false;
          if (Up != other.Up) return false;
          if (Down != other.Down) return false;
          if (Space != other.Space) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Left != false) hash ^= Left.GetHashCode();
          if (Right != false) hash ^= Right.GetHashCode();
          if (Up != false) hash ^= Up.GetHashCode();
          if (Down != false) hash ^= Down.GetHashCode();
          if (Space != false) hash ^= Space.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Left != false) {
            output.WriteRawTag(8);
            output.WriteBool(Left);
          }
          if (Right != false) {
            output.WriteRawTag(16);
            output.WriteBool(Right);
          }
          if (Up != false) {
            output.WriteRawTag(24);
            output.WriteBool(Up);
          }
          if (Down != false) {
            output.WriteRawTag(32);
            output.WriteBool(Down);
          }
          if (Space != false) {
            output.WriteRawTag(40);
            output.WriteBool(Space);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Left != false) {
            size += 1 + 1;
          }
          if (Right != false) {
            size += 1 + 1;
          }
          if (Up != false) {
            size += 1 + 1;
          }
          if (Down != false) {
            size += 1 + 1;
          }
          if (Space != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Input other) {
          if (other == null) {
            return;
          }
          if (other.Left != false) {
            Left = other.Left;
          }
          if (other.Right != false) {
            Right = other.Right;
          }
          if (other.Up != false) {
            Up = other.Up;
          }
          if (other.Down != false) {
            Down = other.Down;
          }
          if (other.Space != false) {
            Space = other.Space;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Left = input.ReadBool();
                break;
              }
              case 16: {
                Right = input.ReadBool();
                break;
              }
              case 24: {
                Up = input.ReadBool();
                break;
              }
              case 32: {
                Down = input.ReadBool();
                break;
              }
              case 40: {
                Space = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SnapShotMessage : pb::IMessage<SnapShotMessage> {
    private static readonly pb::MessageParser<SnapShotMessage> _parser = new pb::MessageParser<SnapShotMessage>(() => new SnapShotMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapShotMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotMessage(SnapShotMessage other) : this() {
      netID_ = other.netID_;
      sequence_ = other.sequence_;
      deltapacketindex_ = other.deltapacketindex_;
      initial_ = other.initial_;
      inputack_ = other.inputack_;
      objectsnapshot_ = other.objectsnapshot_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotMessage Clone() {
      return new SnapShotMessage(this);
    }

    /// <summary>Field number for the "netID" field.</summary>
    public const int NetIDFieldNumber = 1;
    private int netID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetID {
      get { return netID_; }
      set {
        netID_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "deltapacketindex" field.</summary>
    public const int DeltapacketindexFieldNumber = 3;
    private int deltapacketindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deltapacketindex {
      get { return deltapacketindex_; }
      set {
        deltapacketindex_ = value;
      }
    }

    /// <summary>Field number for the "initial" field.</summary>
    public const int InitialFieldNumber = 4;
    private bool initial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initial {
      get { return initial_; }
      set {
        initial_ = value;
      }
    }

    /// <summary>Field number for the "inputack" field.</summary>
    public const int InputackFieldNumber = 5;
    private int inputack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inputack {
      get { return inputack_; }
      set {
        inputack_ = value;
      }
    }

    /// <summary>Field number for the "objectsnapshot" field.</summary>
    public const int ObjectsnapshotFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Types.Objectstate> _repeated_objectsnapshot_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Types.Objectstate.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Types.Objectstate> objectsnapshot_ = new pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Types.Objectstate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Types.Objectstate> Objectsnapshot {
      get { return objectsnapshot_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapShotMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapShotMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetID != other.NetID) return false;
      if (Sequence != other.Sequence) return false;
      if (Deltapacketindex != other.Deltapacketindex) return false;
      if (Initial != other.Initial) return false;
      if (Inputack != other.Inputack) return false;
      if(!objectsnapshot_.Equals(other.objectsnapshot_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetID != 0) hash ^= NetID.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Deltapacketindex != 0) hash ^= Deltapacketindex.GetHashCode();
      if (Initial != false) hash ^= Initial.GetHashCode();
      if (Inputack != 0) hash ^= Inputack.GetHashCode();
      hash ^= objectsnapshot_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetID);
      }
      if (Sequence != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sequence);
      }
      if (Deltapacketindex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Deltapacketindex);
      }
      if (Initial != false) {
        output.WriteRawTag(32);
        output.WriteBool(Initial);
      }
      if (Inputack != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Inputack);
      }
      objectsnapshot_.WriteTo(output, _repeated_objectsnapshot_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetID);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Deltapacketindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deltapacketindex);
      }
      if (Initial != false) {
        size += 1 + 1;
      }
      if (Inputack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inputack);
      }
      size += objectsnapshot_.CalculateSize(_repeated_objectsnapshot_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapShotMessage other) {
      if (other == null) {
        return;
      }
      if (other.NetID != 0) {
        NetID = other.NetID;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Deltapacketindex != 0) {
        Deltapacketindex = other.Deltapacketindex;
      }
      if (other.Initial != false) {
        Initial = other.Initial;
      }
      if (other.Inputack != 0) {
        Inputack = other.Inputack;
      }
      objectsnapshot_.Add(other.objectsnapshot_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetID = input.ReadInt32();
            break;
          }
          case 16: {
            Sequence = input.ReadInt32();
            break;
          }
          case 24: {
            Deltapacketindex = input.ReadInt32();
            break;
          }
          case 32: {
            Initial = input.ReadBool();
            break;
          }
          case 40: {
            Inputack = input.ReadInt32();
            break;
          }
          case 50: {
            objectsnapshot_.AddEntriesFrom(input, _repeated_objectsnapshot_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SnapShotMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Objectstate : pb::IMessage<Objectstate> {
        private static readonly pb::MessageParser<Objectstate> _parser = new pb::MessageParser<Objectstate>(() => new Objectstate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Objectstate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.ProtobufMessage.SnapShotMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate(Objectstate other) : this() {
          interacting_ = other.interacting_;
          positionX_ = other.positionX_;
          positionY_ = other.positionY_;
          angle_ = other.angle_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate Clone() {
          return new Objectstate(this);
        }

        /// <summary>Field number for the "interacting" field.</summary>
        public const int InteractingFieldNumber = 1;
        private bool interacting_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Interacting {
          get { return interacting_; }
          set {
            interacting_ = value;
          }
        }

        /// <summary>Field number for the "positionX" field.</summary>
        public const int PositionXFieldNumber = 2;
        private float positionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionX {
          get { return positionX_; }
          set {
            positionX_ = value;
          }
        }

        /// <summary>Field number for the "positionY" field.</summary>
        public const int PositionYFieldNumber = 3;
        private float positionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionY {
          get { return positionY_; }
          set {
            positionY_ = value;
          }
        }

        /// <summary>Field number for the "angle" field.</summary>
        public const int AngleFieldNumber = 4;
        private float angle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Angle {
          get { return angle_; }
          set {
            angle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Objectstate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Objectstate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Interacting != other.Interacting) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Interacting != false) hash ^= Interacting.GetHashCode();
          if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
          if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
          if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Interacting != false) {
            output.WriteRawTag(8);
            output.WriteBool(Interacting);
          }
          if (PositionX != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(PositionX);
          }
          if (PositionY != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(PositionY);
          }
          if (Angle != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Angle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Interacting != false) {
            size += 1 + 1;
          }
          if (PositionX != 0F) {
            size += 1 + 4;
          }
          if (PositionY != 0F) {
            size += 1 + 4;
          }
          if (Angle != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Objectstate other) {
          if (other == null) {
            return;
          }
          if (other.Interacting != false) {
            Interacting = other.Interacting;
          }
          if (other.PositionX != 0F) {
            PositionX = other.PositionX;
          }
          if (other.PositionY != 0F) {
            PositionY = other.PositionY;
          }
          if (other.Angle != 0F) {
            Angle = other.Angle;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Interacting = input.ReadBool();
                break;
              }
              case 21: {
                PositionX = input.ReadFloat();
                break;
              }
              case 29: {
                PositionY = input.ReadFloat();
                break;
              }
              case 37: {
                Angle = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SnapShotInputMessage : pb::IMessage<SnapShotInputMessage> {
    private static readonly pb::MessageParser<SnapShotInputMessage> _parser = new pb::MessageParser<SnapShotInputMessage>(() => new SnapShotInputMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SnapShotInputMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotInputMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotInputMessage(SnapShotInputMessage other) : this() {
      sequence_ = other.sequence_;
      left_ = other.left_;
      right_ = other.right_;
      up_ = other.up_;
      down_ = other.down_;
      space_ = other.space_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SnapShotInputMessage Clone() {
      return new SnapShotInputMessage(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private bool left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 3;
    private bool right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "up" field.</summary>
    public const int UpFieldNumber = 4;
    private bool up_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Up {
      get { return up_; }
      set {
        up_ = value;
      }
    }

    /// <summary>Field number for the "down" field.</summary>
    public const int DownFieldNumber = 5;
    private bool down_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Down {
      get { return down_; }
      set {
        down_ = value;
      }
    }

    /// <summary>Field number for the "space" field.</summary>
    public const int SpaceFieldNumber = 6;
    private bool space_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Space {
      get { return space_; }
      set {
        space_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SnapShotInputMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SnapShotInputMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (Left != other.Left) return false;
      if (Right != other.Right) return false;
      if (Up != other.Up) return false;
      if (Down != other.Down) return false;
      if (Space != other.Space) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Left != false) hash ^= Left.GetHashCode();
      if (Right != false) hash ^= Right.GetHashCode();
      if (Up != false) hash ^= Up.GetHashCode();
      if (Down != false) hash ^= Down.GetHashCode();
      if (Space != false) hash ^= Space.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sequence);
      }
      if (Left != false) {
        output.WriteRawTag(16);
        output.WriteBool(Left);
      }
      if (Right != false) {
        output.WriteRawTag(24);
        output.WriteBool(Right);
      }
      if (Up != false) {
        output.WriteRawTag(32);
        output.WriteBool(Up);
      }
      if (Down != false) {
        output.WriteRawTag(40);
        output.WriteBool(Down);
      }
      if (Space != false) {
        output.WriteRawTag(48);
        output.WriteBool(Space);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Left != false) {
        size += 1 + 1;
      }
      if (Right != false) {
        size += 1 + 1;
      }
      if (Up != false) {
        size += 1 + 1;
      }
      if (Down != false) {
        size += 1 + 1;
      }
      if (Space != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SnapShotInputMessage other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Left != false) {
        Left = other.Left;
      }
      if (other.Right != false) {
        Right = other.Right;
      }
      if (other.Up != false) {
        Up = other.Up;
      }
      if (other.Down != false) {
        Down = other.Down;
      }
      if (other.Space != false) {
        Space = other.Space;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadInt32();
            break;
          }
          case 16: {
            Left = input.ReadBool();
            break;
          }
          case 24: {
            Right = input.ReadBool();
            break;
          }
          case 32: {
            Up = input.ReadBool();
            break;
          }
          case 40: {
            Down = input.ReadBool();
            break;
          }
          case 48: {
            Space = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UDPMessageSnapshot : pb::IMessage<UDPMessageSnapshot> {
    private static readonly pb::MessageParser<UDPMessageSnapshot> _parser = new pb::MessageParser<UDPMessageSnapshot>(() => new UDPMessageSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UDPMessageSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPMessageSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPMessageSnapshot(UDPMessageSnapshot other) : this() {
      netid_ = other.netid_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPMessageSnapshot Clone() {
      return new UDPMessageSnapshot(this);
    }

    /// <summary>Field number for the "netid" field.</summary>
    public const int NetidFieldNumber = 1;
    private int netid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Netid {
      get { return netid_; }
      set {
        netid_ = value;
      }
    }

    /// <summary>Field number for the "positionX" field.</summary>
    public const int PositionXFieldNumber = 2;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "positionY" field.</summary>
    public const int PositionYFieldNumber = 3;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 4;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UDPMessageSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UDPMessageSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Netid != other.Netid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Netid != 0) hash ^= Netid.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Netid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Netid);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (Angle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Netid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Netid);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UDPMessageSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.Netid != 0) {
        Netid = other.Netid;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Netid = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 37: {
            Angle = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StateMessage : pb::IMessage<StateMessage> {
    private static readonly pb::MessageParser<StateMessage> _parser = new pb::MessageParser<StateMessage>(() => new StateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateMessage(StateMessage other) : this() {
      netID_ = other.netID_;
      sequence_ = other.sequence_;
      baseACKSequence_ = other.baseACKSequence_;
      inputs_ = other.inputs_.Clone();
      objectstate_ = other.objectstate_.Clone();
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateMessage Clone() {
      return new StateMessage(this);
    }

    /// <summary>Field number for the "netID" field.</summary>
    public const int NetIDFieldNumber = 1;
    private int netID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetID {
      get { return netID_; }
      set {
        netID_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "baseACKSequence" field.</summary>
    public const int BaseACKSequenceFieldNumber = 3;
    private int baseACKSequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseACKSequence {
      get { return baseACKSequence_; }
      set {
        baseACKSequence_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Input> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Input.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Input> inputs_ = new pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Input>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Input> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "objectstate" field.</summary>
    public const int ObjectstateFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Objectstate> _repeated_objectstate_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Objectstate.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Objectstate> objectstate_ = new pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Objectstate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.StateMessage.Types.Objectstate> Objectstate {
      get { return objectstate_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private float timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetID != other.NetID) return false;
      if (Sequence != other.Sequence) return false;
      if (BaseACKSequence != other.BaseACKSequence) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!objectstate_.Equals(other.objectstate_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetID != 0) hash ^= NetID.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (BaseACKSequence != 0) hash ^= BaseACKSequence.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= objectstate_.GetHashCode();
      if (Timestamp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetID);
      }
      if (Sequence != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sequence);
      }
      if (BaseACKSequence != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseACKSequence);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      objectstate_.WriteTo(output, _repeated_objectstate_codec);
      if (Timestamp != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetID);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (BaseACKSequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseACKSequence);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += objectstate_.CalculateSize(_repeated_objectstate_codec);
      if (Timestamp != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateMessage other) {
      if (other == null) {
        return;
      }
      if (other.NetID != 0) {
        NetID = other.NetID;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.BaseACKSequence != 0) {
        BaseACKSequence = other.BaseACKSequence;
      }
      inputs_.Add(other.inputs_);
      objectstate_.Add(other.objectstate_);
      if (other.Timestamp != 0F) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetID = input.ReadInt32();
            break;
          }
          case 16: {
            Sequence = input.ReadInt32();
            break;
          }
          case 24: {
            BaseACKSequence = input.ReadInt32();
            break;
          }
          case 34: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 42: {
            objectstate_.AddEntriesFrom(input, _repeated_objectstate_codec);
            break;
          }
          case 53: {
            Timestamp = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StateMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Input : pb::IMessage<Input> {
        private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Input> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.ProtobufMessage.StateMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input(Input other) : this() {
          left_ = other.left_;
          right_ = other.right_;
          up_ = other.up_;
          down_ = other.down_;
          space_ = other.space_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input Clone() {
          return new Input(this);
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 1;
        private bool left_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        /// <summary>Field number for the "right" field.</summary>
        public const int RightFieldNumber = 2;
        private bool right_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Right {
          get { return right_; }
          set {
            right_ = value;
          }
        }

        /// <summary>Field number for the "up" field.</summary>
        public const int UpFieldNumber = 3;
        private bool up_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Up {
          get { return up_; }
          set {
            up_ = value;
          }
        }

        /// <summary>Field number for the "down" field.</summary>
        public const int DownFieldNumber = 4;
        private bool down_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Down {
          get { return down_; }
          set {
            down_ = value;
          }
        }

        /// <summary>Field number for the "space" field.</summary>
        public const int SpaceFieldNumber = 5;
        private bool space_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Space {
          get { return space_; }
          set {
            space_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Input);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Input other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Left != other.Left) return false;
          if (Right != other.Right) return false;
          if (Up != other.Up) return false;
          if (Down != other.Down) return false;
          if (Space != other.Space) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Left != false) hash ^= Left.GetHashCode();
          if (Right != false) hash ^= Right.GetHashCode();
          if (Up != false) hash ^= Up.GetHashCode();
          if (Down != false) hash ^= Down.GetHashCode();
          if (Space != false) hash ^= Space.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Left != false) {
            output.WriteRawTag(8);
            output.WriteBool(Left);
          }
          if (Right != false) {
            output.WriteRawTag(16);
            output.WriteBool(Right);
          }
          if (Up != false) {
            output.WriteRawTag(24);
            output.WriteBool(Up);
          }
          if (Down != false) {
            output.WriteRawTag(32);
            output.WriteBool(Down);
          }
          if (Space != false) {
            output.WriteRawTag(40);
            output.WriteBool(Space);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Left != false) {
            size += 1 + 1;
          }
          if (Right != false) {
            size += 1 + 1;
          }
          if (Up != false) {
            size += 1 + 1;
          }
          if (Down != false) {
            size += 1 + 1;
          }
          if (Space != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Input other) {
          if (other == null) {
            return;
          }
          if (other.Left != false) {
            Left = other.Left;
          }
          if (other.Right != false) {
            Right = other.Right;
          }
          if (other.Up != false) {
            Up = other.Up;
          }
          if (other.Down != false) {
            Down = other.Down;
          }
          if (other.Space != false) {
            Space = other.Space;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Left = input.ReadBool();
                break;
              }
              case 16: {
                Right = input.ReadBool();
                break;
              }
              case 24: {
                Up = input.ReadBool();
                break;
              }
              case 32: {
                Down = input.ReadBool();
                break;
              }
              case 40: {
                Space = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Objectstate : pb::IMessage<Objectstate> {
        private static readonly pb::MessageParser<Objectstate> _parser = new pb::MessageParser<Objectstate>(() => new Objectstate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Objectstate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.ProtobufMessage.StateMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate(Objectstate other) : this() {
          index_ = other.index_;
          absoluteValue_ = other.absoluteValue_;
          baseSequence_ = other.baseSequence_;
          positionX_ = other.positionX_;
          positionY_ = other.positionY_;
          angle_ = other.angle_;
          linearVelocityX_ = other.linearVelocityX_;
          linearVelocityY_ = other.linearVelocityY_;
          angularVelocity_ = other.angularVelocity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate Clone() {
          return new Objectstate(this);
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 1;
        private int index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "absoluteValue" field.</summary>
        public const int AbsoluteValueFieldNumber = 2;
        private bool absoluteValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool AbsoluteValue {
          get { return absoluteValue_; }
          set {
            absoluteValue_ = value;
          }
        }

        /// <summary>Field number for the "baseSequence" field.</summary>
        public const int BaseSequenceFieldNumber = 3;
        private int baseSequence_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BaseSequence {
          get { return baseSequence_; }
          set {
            baseSequence_ = value;
          }
        }

        /// <summary>Field number for the "positionX" field.</summary>
        public const int PositionXFieldNumber = 4;
        private float positionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionX {
          get { return positionX_; }
          set {
            positionX_ = value;
          }
        }

        /// <summary>Field number for the "positionY" field.</summary>
        public const int PositionYFieldNumber = 5;
        private float positionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionY {
          get { return positionY_; }
          set {
            positionY_ = value;
          }
        }

        /// <summary>Field number for the "angle" field.</summary>
        public const int AngleFieldNumber = 6;
        private float angle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Angle {
          get { return angle_; }
          set {
            angle_ = value;
          }
        }

        /// <summary>Field number for the "linear_velocityX" field.</summary>
        public const int LinearVelocityXFieldNumber = 7;
        private float linearVelocityX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float LinearVelocityX {
          get { return linearVelocityX_; }
          set {
            linearVelocityX_ = value;
          }
        }

        /// <summary>Field number for the "linear_velocityY" field.</summary>
        public const int LinearVelocityYFieldNumber = 8;
        private float linearVelocityY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float LinearVelocityY {
          get { return linearVelocityY_; }
          set {
            linearVelocityY_ = value;
          }
        }

        /// <summary>Field number for the "angular_velocity" field.</summary>
        public const int AngularVelocityFieldNumber = 9;
        private float angularVelocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float AngularVelocity {
          get { return angularVelocity_; }
          set {
            angularVelocity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Objectstate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Objectstate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Index != other.Index) return false;
          if (AbsoluteValue != other.AbsoluteValue) return false;
          if (BaseSequence != other.BaseSequence) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinearVelocityX, other.LinearVelocityX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinearVelocityY, other.LinearVelocityY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularVelocity, other.AngularVelocity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Index != 0) hash ^= Index.GetHashCode();
          if (AbsoluteValue != false) hash ^= AbsoluteValue.GetHashCode();
          if (BaseSequence != 0) hash ^= BaseSequence.GetHashCode();
          if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
          if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
          if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
          if (LinearVelocityX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinearVelocityX);
          if (LinearVelocityY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinearVelocityY);
          if (AngularVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularVelocity);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Index != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Index);
          }
          if (AbsoluteValue != false) {
            output.WriteRawTag(16);
            output.WriteBool(AbsoluteValue);
          }
          if (BaseSequence != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(BaseSequence);
          }
          if (PositionX != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(PositionX);
          }
          if (PositionY != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(PositionY);
          }
          if (Angle != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(Angle);
          }
          if (LinearVelocityX != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(LinearVelocityX);
          }
          if (LinearVelocityY != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(LinearVelocityY);
          }
          if (AngularVelocity != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(AngularVelocity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
          }
          if (AbsoluteValue != false) {
            size += 1 + 1;
          }
          if (BaseSequence != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseSequence);
          }
          if (PositionX != 0F) {
            size += 1 + 4;
          }
          if (PositionY != 0F) {
            size += 1 + 4;
          }
          if (Angle != 0F) {
            size += 1 + 4;
          }
          if (LinearVelocityX != 0F) {
            size += 1 + 4;
          }
          if (LinearVelocityY != 0F) {
            size += 1 + 4;
          }
          if (AngularVelocity != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Objectstate other) {
          if (other == null) {
            return;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.AbsoluteValue != false) {
            AbsoluteValue = other.AbsoluteValue;
          }
          if (other.BaseSequence != 0) {
            BaseSequence = other.BaseSequence;
          }
          if (other.PositionX != 0F) {
            PositionX = other.PositionX;
          }
          if (other.PositionY != 0F) {
            PositionY = other.PositionY;
          }
          if (other.Angle != 0F) {
            Angle = other.Angle;
          }
          if (other.LinearVelocityX != 0F) {
            LinearVelocityX = other.LinearVelocityX;
          }
          if (other.LinearVelocityY != 0F) {
            LinearVelocityY = other.LinearVelocityY;
          }
          if (other.AngularVelocity != 0F) {
            AngularVelocity = other.AngularVelocity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Index = input.ReadInt32();
                break;
              }
              case 16: {
                AbsoluteValue = input.ReadBool();
                break;
              }
              case 24: {
                BaseSequence = input.ReadInt32();
                break;
              }
              case 37: {
                PositionX = input.ReadFloat();
                break;
              }
              case 45: {
                PositionY = input.ReadFloat();
                break;
              }
              case 53: {
                Angle = input.ReadFloat();
                break;
              }
              case 61: {
                LinearVelocityX = input.ReadFloat();
                break;
              }
              case 69: {
                LinearVelocityY = input.ReadFloat();
                break;
              }
              case 77: {
                AngularVelocity = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UDPStringMessage : pb::IMessage<UDPStringMessage> {
    private static readonly pb::MessageParser<UDPStringMessage> _parser = new pb::MessageParser<UDPStringMessage>(() => new UDPStringMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UDPStringMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPStringMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPStringMessage(UDPStringMessage other) : this() {
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UDPStringMessage Clone() {
      return new UDPStringMessage(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UDPStringMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UDPStringMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UDPStringMessage other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StateACKPacket : pb::IMessage<StateACKPacket> {
    private static readonly pb::MessageParser<StateACKPacket> _parser = new pb::MessageParser<StateACKPacket>(() => new StateACKPacket());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateACKPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateACKPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateACKPacket(StateACKPacket other) : this() {
      netID_ = other.netID_;
      ackSequence_ = other.ackSequence_;
      ackBits_ = other.ackBits_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateACKPacket Clone() {
      return new StateACKPacket(this);
    }

    /// <summary>Field number for the "netID" field.</summary>
    public const int NetIDFieldNumber = 1;
    private int netID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetID {
      get { return netID_; }
      set {
        netID_ = value;
      }
    }

    /// <summary>Field number for the "ackSequence" field.</summary>
    public const int AckSequenceFieldNumber = 2;
    private int ackSequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AckSequence {
      get { return ackSequence_; }
      set {
        ackSequence_ = value;
      }
    }

    /// <summary>Field number for the "ackBits" field.</summary>
    public const int AckBitsFieldNumber = 3;
    private int ackBits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AckBits {
      get { return ackBits_; }
      set {
        ackBits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateACKPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateACKPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetID != other.NetID) return false;
      if (AckSequence != other.AckSequence) return false;
      if (AckBits != other.AckBits) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetID != 0) hash ^= NetID.GetHashCode();
      if (AckSequence != 0) hash ^= AckSequence.GetHashCode();
      if (AckBits != 0) hash ^= AckBits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetID);
      }
      if (AckSequence != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AckSequence);
      }
      if (AckBits != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AckBits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetID);
      }
      if (AckSequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckSequence);
      }
      if (AckBits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckBits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateACKPacket other) {
      if (other == null) {
        return;
      }
      if (other.NetID != 0) {
        NetID = other.NetID;
      }
      if (other.AckSequence != 0) {
        AckSequence = other.AckSequence;
      }
      if (other.AckBits != 0) {
        AckBits = other.AckBits;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetID = input.ReadInt32();
            break;
          }
          case 16: {
            AckSequence = input.ReadInt32();
            break;
          }
          case 24: {
            AckBits = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TCPMessage : pb::IMessage<TCPMessage> {
    private static readonly pb::MessageParser<TCPMessage> _parser = new pb::MessageParser<TCPMessage>(() => new TCPMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TCPMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPMessage(TCPMessage other) : this() {
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TCPMessage Clone() {
      return new TCPMessage(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TCPMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TCPMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TCPMessage other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PredictionReconciliationMessage : pb::IMessage<PredictionReconciliationMessage> {
    private static readonly pb::MessageParser<PredictionReconciliationMessage> _parser = new pb::MessageParser<PredictionReconciliationMessage>(() => new PredictionReconciliationMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredictionReconciliationMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionReconciliationMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionReconciliationMessage(PredictionReconciliationMessage other) : this() {
      netID_ = other.netID_;
      sequence_ = other.sequence_;
      inputs_ = other.inputs_.Clone();
      objectstate_ = other.objectstate_.Clone();
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionReconciliationMessage Clone() {
      return new PredictionReconciliationMessage(this);
    }

    /// <summary>Field number for the "netID" field.</summary>
    public const int NetIDFieldNumber = 1;
    private int netID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetID {
      get { return netID_; }
      set {
        netID_ = value;
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Input> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Input.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Input> inputs_ = new pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Input>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Input> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "objectstate" field.</summary>
    public const int ObjectstateFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Objectstate> _repeated_objectstate_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Objectstate.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Objectstate> objectstate_ = new pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Objectstate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Types.Objectstate> Objectstate {
      get { return objectstate_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private float timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredictionReconciliationMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredictionReconciliationMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetID != other.NetID) return false;
      if (Sequence != other.Sequence) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!objectstate_.Equals(other.objectstate_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetID != 0) hash ^= NetID.GetHashCode();
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= objectstate_.GetHashCode();
      if (Timestamp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetID);
      }
      if (Sequence != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sequence);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      objectstate_.WriteTo(output, _repeated_objectstate_codec);
      if (Timestamp != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetID);
      }
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += objectstate_.CalculateSize(_repeated_objectstate_codec);
      if (Timestamp != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredictionReconciliationMessage other) {
      if (other == null) {
        return;
      }
      if (other.NetID != 0) {
        NetID = other.NetID;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      inputs_.Add(other.inputs_);
      objectstate_.Add(other.objectstate_);
      if (other.Timestamp != 0F) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetID = input.ReadInt32();
            break;
          }
          case 16: {
            Sequence = input.ReadInt32();
            break;
          }
          case 34: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 42: {
            objectstate_.AddEntriesFrom(input, _repeated_objectstate_codec);
            break;
          }
          case 53: {
            Timestamp = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PredictionReconciliationMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Input : pb::IMessage<Input> {
        private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Input> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input(Input other) : this() {
          left_ = other.left_;
          right_ = other.right_;
          up_ = other.up_;
          down_ = other.down_;
          space_ = other.space_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input Clone() {
          return new Input(this);
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 1;
        private bool left_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        /// <summary>Field number for the "right" field.</summary>
        public const int RightFieldNumber = 2;
        private bool right_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Right {
          get { return right_; }
          set {
            right_ = value;
          }
        }

        /// <summary>Field number for the "up" field.</summary>
        public const int UpFieldNumber = 3;
        private bool up_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Up {
          get { return up_; }
          set {
            up_ = value;
          }
        }

        /// <summary>Field number for the "down" field.</summary>
        public const int DownFieldNumber = 4;
        private bool down_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Down {
          get { return down_; }
          set {
            down_ = value;
          }
        }

        /// <summary>Field number for the "space" field.</summary>
        public const int SpaceFieldNumber = 5;
        private bool space_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Space {
          get { return space_; }
          set {
            space_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Input);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Input other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Left != other.Left) return false;
          if (Right != other.Right) return false;
          if (Up != other.Up) return false;
          if (Down != other.Down) return false;
          if (Space != other.Space) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Left != false) hash ^= Left.GetHashCode();
          if (Right != false) hash ^= Right.GetHashCode();
          if (Up != false) hash ^= Up.GetHashCode();
          if (Down != false) hash ^= Down.GetHashCode();
          if (Space != false) hash ^= Space.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Left != false) {
            output.WriteRawTag(8);
            output.WriteBool(Left);
          }
          if (Right != false) {
            output.WriteRawTag(16);
            output.WriteBool(Right);
          }
          if (Up != false) {
            output.WriteRawTag(24);
            output.WriteBool(Up);
          }
          if (Down != false) {
            output.WriteRawTag(32);
            output.WriteBool(Down);
          }
          if (Space != false) {
            output.WriteRawTag(40);
            output.WriteBool(Space);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Left != false) {
            size += 1 + 1;
          }
          if (Right != false) {
            size += 1 + 1;
          }
          if (Up != false) {
            size += 1 + 1;
          }
          if (Down != false) {
            size += 1 + 1;
          }
          if (Space != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Input other) {
          if (other == null) {
            return;
          }
          if (other.Left != false) {
            Left = other.Left;
          }
          if (other.Right != false) {
            Right = other.Right;
          }
          if (other.Up != false) {
            Up = other.Up;
          }
          if (other.Down != false) {
            Down = other.Down;
          }
          if (other.Space != false) {
            Space = other.Space;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Left = input.ReadBool();
                break;
              }
              case 16: {
                Right = input.ReadBool();
                break;
              }
              case 24: {
                Up = input.ReadBool();
                break;
              }
              case 32: {
                Down = input.ReadBool();
                break;
              }
              case 40: {
                Space = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Objectstate : pb::IMessage<Objectstate> {
        private static readonly pb::MessageParser<Objectstate> _parser = new pb::MessageParser<Objectstate>(() => new Objectstate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Objectstate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.ProtobufMessage.PredictionReconciliationMessage.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate(Objectstate other) : this() {
          positionX_ = other.positionX_;
          positionY_ = other.positionY_;
          angle_ = other.angle_;
          linearVelocityX_ = other.linearVelocityX_;
          linearVelocityY_ = other.linearVelocityY_;
          angularVelocity_ = other.angularVelocity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Objectstate Clone() {
          return new Objectstate(this);
        }

        /// <summary>Field number for the "positionX" field.</summary>
        public const int PositionXFieldNumber = 1;
        private float positionX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionX {
          get { return positionX_; }
          set {
            positionX_ = value;
          }
        }

        /// <summary>Field number for the "positionY" field.</summary>
        public const int PositionYFieldNumber = 2;
        private float positionY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PositionY {
          get { return positionY_; }
          set {
            positionY_ = value;
          }
        }

        /// <summary>Field number for the "angle" field.</summary>
        public const int AngleFieldNumber = 3;
        private float angle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Angle {
          get { return angle_; }
          set {
            angle_ = value;
          }
        }

        /// <summary>Field number for the "linear_velocityX" field.</summary>
        public const int LinearVelocityXFieldNumber = 4;
        private float linearVelocityX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float LinearVelocityX {
          get { return linearVelocityX_; }
          set {
            linearVelocityX_ = value;
          }
        }

        /// <summary>Field number for the "linear_velocityY" field.</summary>
        public const int LinearVelocityYFieldNumber = 5;
        private float linearVelocityY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float LinearVelocityY {
          get { return linearVelocityY_; }
          set {
            linearVelocityY_ = value;
          }
        }

        /// <summary>Field number for the "angular_velocity" field.</summary>
        public const int AngularVelocityFieldNumber = 6;
        private float angularVelocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float AngularVelocity {
          get { return angularVelocity_; }
          set {
            angularVelocity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Objectstate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Objectstate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinearVelocityX, other.LinearVelocityX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LinearVelocityY, other.LinearVelocityY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngularVelocity, other.AngularVelocity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
          if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
          if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
          if (LinearVelocityX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinearVelocityX);
          if (LinearVelocityY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LinearVelocityY);
          if (AngularVelocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngularVelocity);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PositionX != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(PositionX);
          }
          if (PositionY != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(PositionY);
          }
          if (Angle != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Angle);
          }
          if (LinearVelocityX != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(LinearVelocityX);
          }
          if (LinearVelocityY != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(LinearVelocityY);
          }
          if (AngularVelocity != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(AngularVelocity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PositionX != 0F) {
            size += 1 + 4;
          }
          if (PositionY != 0F) {
            size += 1 + 4;
          }
          if (Angle != 0F) {
            size += 1 + 4;
          }
          if (LinearVelocityX != 0F) {
            size += 1 + 4;
          }
          if (LinearVelocityY != 0F) {
            size += 1 + 4;
          }
          if (AngularVelocity != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Objectstate other) {
          if (other == null) {
            return;
          }
          if (other.PositionX != 0F) {
            PositionX = other.PositionX;
          }
          if (other.PositionY != 0F) {
            PositionY = other.PositionY;
          }
          if (other.Angle != 0F) {
            Angle = other.Angle;
          }
          if (other.LinearVelocityX != 0F) {
            LinearVelocityX = other.LinearVelocityX;
          }
          if (other.LinearVelocityY != 0F) {
            LinearVelocityY = other.LinearVelocityY;
          }
          if (other.AngularVelocity != 0F) {
            AngularVelocity = other.AngularVelocity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                PositionX = input.ReadFloat();
                break;
              }
              case 21: {
                PositionY = input.ReadFloat();
                break;
              }
              case 29: {
                Angle = input.ReadFloat();
                break;
              }
              case 37: {
                LinearVelocityX = input.ReadFloat();
                break;
              }
              case 45: {
                LinearVelocityY = input.ReadFloat();
                break;
              }
              case 53: {
                AngularVelocity = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PredictionReconciliationInputMessage : pb::IMessage<PredictionReconciliationInputMessage> {
    private static readonly pb::MessageParser<PredictionReconciliationInputMessage> _parser = new pb::MessageParser<PredictionReconciliationInputMessage>(() => new PredictionReconciliationInputMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PredictionReconciliationInputMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionReconciliationInputMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionReconciliationInputMessage(PredictionReconciliationInputMessage other) : this() {
      sequence_ = other.sequence_;
      netid_ = other.netid_;
      inputs_ = other.inputs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PredictionReconciliationInputMessage Clone() {
      return new PredictionReconciliationInputMessage(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private int sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "netid" field.</summary>
    public const int NetidFieldNumber = 2;
    private int netid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Netid {
      get { return netid_; }
      set {
        netid_ = value;
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Types.Input> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Types.Input.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Types.Input> inputs_ = new pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Types.Input>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Types.Input> Inputs {
      get { return inputs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PredictionReconciliationInputMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PredictionReconciliationInputMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (Netid != other.Netid) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sequence != 0) hash ^= Sequence.GetHashCode();
      if (Netid != 0) hash ^= Netid.GetHashCode();
      hash ^= inputs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sequence != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sequence);
      }
      if (Netid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Netid);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sequence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sequence);
      }
      if (Netid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Netid);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PredictionReconciliationInputMessage other) {
      if (other == null) {
        return;
      }
      if (other.Sequence != 0) {
        Sequence = other.Sequence;
      }
      if (other.Netid != 0) {
        Netid = other.Netid;
      }
      inputs_.Add(other.inputs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadInt32();
            break;
          }
          case 16: {
            Netid = input.ReadInt32();
            break;
          }
          case 26: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PredictionReconciliationInputMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Input : pb::IMessage<Input> {
        private static readonly pb::MessageParser<Input> _parser = new pb::MessageParser<Input>(() => new Input());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Input> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Protobuf.ProtobufMessage.PredictionReconciliationInputMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input(Input other) : this() {
          left_ = other.left_;
          right_ = other.right_;
          up_ = other.up_;
          down_ = other.down_;
          space_ = other.space_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Input Clone() {
          return new Input(this);
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 1;
        private bool left_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Left {
          get { return left_; }
          set {
            left_ = value;
          }
        }

        /// <summary>Field number for the "right" field.</summary>
        public const int RightFieldNumber = 2;
        private bool right_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Right {
          get { return right_; }
          set {
            right_ = value;
          }
        }

        /// <summary>Field number for the "up" field.</summary>
        public const int UpFieldNumber = 3;
        private bool up_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Up {
          get { return up_; }
          set {
            up_ = value;
          }
        }

        /// <summary>Field number for the "down" field.</summary>
        public const int DownFieldNumber = 4;
        private bool down_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Down {
          get { return down_; }
          set {
            down_ = value;
          }
        }

        /// <summary>Field number for the "space" field.</summary>
        public const int SpaceFieldNumber = 5;
        private bool space_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Space {
          get { return space_; }
          set {
            space_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Input);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Input other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Left != other.Left) return false;
          if (Right != other.Right) return false;
          if (Up != other.Up) return false;
          if (Down != other.Down) return false;
          if (Space != other.Space) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Left != false) hash ^= Left.GetHashCode();
          if (Right != false) hash ^= Right.GetHashCode();
          if (Up != false) hash ^= Up.GetHashCode();
          if (Down != false) hash ^= Down.GetHashCode();
          if (Space != false) hash ^= Space.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Left != false) {
            output.WriteRawTag(8);
            output.WriteBool(Left);
          }
          if (Right != false) {
            output.WriteRawTag(16);
            output.WriteBool(Right);
          }
          if (Up != false) {
            output.WriteRawTag(24);
            output.WriteBool(Up);
          }
          if (Down != false) {
            output.WriteRawTag(32);
            output.WriteBool(Down);
          }
          if (Space != false) {
            output.WriteRawTag(40);
            output.WriteBool(Space);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Left != false) {
            size += 1 + 1;
          }
          if (Right != false) {
            size += 1 + 1;
          }
          if (Up != false) {
            size += 1 + 1;
          }
          if (Down != false) {
            size += 1 + 1;
          }
          if (Space != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Input other) {
          if (other == null) {
            return;
          }
          if (other.Left != false) {
            Left = other.Left;
          }
          if (other.Right != false) {
            Right = other.Right;
          }
          if (other.Up != false) {
            Up = other.Up;
          }
          if (other.Down != false) {
            Down = other.Down;
          }
          if (other.Space != false) {
            Space = other.Space;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Left = input.ReadBool();
                break;
              }
              case 16: {
                Right = input.ReadBool();
                break;
              }
              case 24: {
                Up = input.ReadBool();
                break;
              }
              case 32: {
                Down = input.ReadBool();
                break;
              }
              case 40: {
                Space = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ServerTimeRequest : pb::IMessage<ServerTimeRequest> {
    private static readonly pb::MessageParser<ServerTimeRequest> _parser = new pb::MessageParser<ServerTimeRequest>(() => new ServerTimeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerTimeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.ProtobufMessage.ProtoMessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTimeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTimeRequest(ServerTimeRequest other) : this() {
      clientID_ = other.clientID_;
      clienttime_ = other.clienttime_;
      servertime_ = other.servertime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerTimeRequest Clone() {
      return new ServerTimeRequest(this);
    }

    /// <summary>Field number for the "clientID" field.</summary>
    public const int ClientIDFieldNumber = 1;
    private int clientID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientID {
      get { return clientID_; }
      set {
        clientID_ = value;
      }
    }

    /// <summary>Field number for the "clienttime" field.</summary>
    public const int ClienttimeFieldNumber = 2;
    private int clienttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Clienttime {
      get { return clienttime_; }
      set {
        clienttime_ = value;
      }
    }

    /// <summary>Field number for the "servertime" field.</summary>
    public const int ServertimeFieldNumber = 3;
    private int servertime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Servertime {
      get { return servertime_; }
      set {
        servertime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerTimeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerTimeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientID != other.ClientID) return false;
      if (Clienttime != other.Clienttime) return false;
      if (Servertime != other.Servertime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientID != 0) hash ^= ClientID.GetHashCode();
      if (Clienttime != 0) hash ^= Clienttime.GetHashCode();
      if (Servertime != 0) hash ^= Servertime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClientID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ClientID);
      }
      if (Clienttime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Clienttime);
      }
      if (Servertime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Servertime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientID);
      }
      if (Clienttime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Clienttime);
      }
      if (Servertime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Servertime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerTimeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClientID != 0) {
        ClientID = other.ClientID;
      }
      if (other.Clienttime != 0) {
        Clienttime = other.Clienttime;
      }
      if (other.Servertime != 0) {
        Servertime = other.Servertime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ClientID = input.ReadInt32();
            break;
          }
          case 16: {
            Clienttime = input.ReadInt32();
            break;
          }
          case 24: {
            Servertime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
